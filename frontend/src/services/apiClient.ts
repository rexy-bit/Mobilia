// ‚úÖ Variable globale pour √©viter les refresh multiples simultan√©s
let isRefreshing = false;
let refreshPromise: Promise<boolean> | null = null;

export const apiClient = async(
  url: string, 
  options: RequestInit = {}, 
  isRetry = false
): Promise<Response> => {
  try {
    const res = await fetch(url, {
      ...options,
      credentials: "include"
    });

    // ‚úÖ Si tout va bien, on renvoie la r√©ponse
    if (res.status !== 401 && res.status !== 403) {
      return res;
    }

    // ‚ùå Si c'est d√©j√† un retry, on redirige
    if (isRetry) {
      console.warn("Auth failed after retry, redirecting to /account");
      window.location.href = "/account";
      throw new Error("Unauthorized - already retried");
    }

    // üîÑ Si un refresh est d√©j√† en cours, on attend
    if (isRefreshing && refreshPromise) {
      console.log("Refresh already in progress, waiting...");
      const success = await refreshPromise;
      
      if (success) {
        // ‚úÖ Le refresh a r√©ussi, on retente la requ√™te originale
        return apiClient(url, options, true);
      } else {
        // ‚ùå Le refresh a √©chou√©
        window.location.href = "/account";
        throw new Error("Refresh failed");
      }
    }

    // üÜï D√©but du refresh
    isRefreshing = true;
    refreshPromise = attemptRefresh();

    const success = await refreshPromise;
    
    // Reset du flag
    isRefreshing = false;
    refreshPromise = null;

    if (success) {
      // ‚úÖ Retry la requ√™te originale
      return apiClient(url, options, true);
    } else {
      // ‚ùå √âchec du refresh
      window.location.href = "/account";
      throw new Error("Unable to refresh token");
    }

  } catch (err) {
    console.error("API error:", err);
    isRefreshing = false;
    refreshPromise = null;
    throw err;
  }
}

// Fonction s√©par√©e pour le refresh
async function attemptRefresh(): Promise<boolean> {
  try {
    console.log("Attempting token refresh...");
    
    const refreshRes = await fetch(
      "https://mobilia-xzo6.onrender.com/api/v1/auth/refresh-token", 
      {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json"
        }
      }
    );

    if (!refreshRes.ok) {
      console.error("Refresh failed:", refreshRes.status);
      return false;
    }

    console.log("Token refresh successful");
    return true;
    
  } catch (err) {
    console.error("Refresh attempt error:", err);
    return false;
  }
}

// ‚úÖ Helper pour v√©rifier si l'utilisateur est authentifi√©
export const checkAuth = async(): Promise<boolean> => {
  try {
    const res = await fetch(
      "https://mobilia-xzo6.onrender.com/api/v1/auth/check", 
      {
        method: "GET",
        credentials: "include"
      }
    );
    
    return res.ok;
  } catch {
    return false;
  }
}